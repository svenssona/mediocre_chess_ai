# AUTOGENERATED! DO NOT EDIT! File to edit: 03_play.ipynb (unless otherwise specified).

__all__ = ['Valuator', 'explore_leaves', 'computer_move', 'move']

# Cell
from .train import Net
import torch


class Valuator(object):
    """Valuates a given board state using a trained neural network"""
    def __init__(self):
        self.model = Net()
        self.param = torch.load("nets/value.pth", map_location=lambda storage, loc: storage)
        self.model.load_state_dict(self.param)

    def __call__(self, s):
        brd = s.serialize()[None]
        output = self.model(torch.tensor(brd).float())
        return float(output.data)

# Cell
def explore_leaves(s, v):
    ret = []
    for mv in s.edges():
        s.board.push(mv)
        ret.append((v(s), mv))
        s.board.pop()
    return ret

def computer_move():
    moves = sorted(explore_leaves(s, v), key=lambda x: x[0], reverse=s.board.turn)
    print("Computer moves:", moves[0])
    s.board.push(moves[0][1])

def move():
    if not s.board.is_game_over():
        human_move = input("Next move: ")
    if chess.Move.from_uci(human_move) in s.board.legal_moves:
        print("Human moves:", human_move)
        s.board.push_san(human_move)
        computer_move()
    else:
        print("Illegal Move, try again.")
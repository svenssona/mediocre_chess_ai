# AUTOGENERATED! DO NOT EDIT! File to edit: 01_generate_training_set.ipynb (unless otherwise specified).

__all__ = ['get_dataset']

# Cell
import os
import chess.pgn
import numpy as np
from .state import State


def get_dataset(num_samples):
    # Initialize variables for storing board states and results.
    X,Y = [], []
    gn = 0

    # Value from each match depending on outcome.
    values = {'1/2-1/2': 0, '0-1': -1, '1-0': 1}

    for fn in os.listdir("data"):
        # pgn files in this data folder
        pgn = open(os.path.join("data", fn))
        while 1:
            game = chess.pgn.read_game(pgn)
            if game is None:
                break
            # Gets the result from the game.
            res = game.headers["Result"]
            if res not in values:
                continue
            value = values[res]

            # Plays the next move .
            board = game.board()
            for i,move in enumerate(game.mainline_moves()):
                board.push(move)
                ser = State(board).serialize()
                X.append(ser)
                Y.append(value)
            print("parsing game %d, got %d examples" % (gn, len(X)))

            # Cancel if we got enough examples.
            if num_samples is not None and len(X) > num_samples:
                return X,Y
            gn +=1
    # Convert to numpy arrays
    X = np.array(X)
    Y = np.array(Y)
    return X,Y